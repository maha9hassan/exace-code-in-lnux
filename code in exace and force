# exace-code-in-lnux
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{
 printf(hi.c\n");
 printf("PID of hello.c = %d\n", getpid());
 return 0;
}

run///
hi.c
PID of hello.c =3341


code in forke:
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#include <sys/types.h>
#include <sys/wait.h>

int main() {
/*pid_t is data type stands for process identification and it is used to represent process ids.*/
pid_t forkStatus;

forkStatus = fork();

/* Child... */
if        (forkStatus == 0) {
printf("Child is running, processing.\n");
sleep(5);
printf("Child is done, exiting.\n");

/* Parent... */
} else if (forkStatus != -1) {
printf("Parent is waiting...\n");

wait(NULL);
printf("Parent is exiting...\n");

} else {
perror("Error while calling the fork function");

}

return 0;
}
run//
Child is running, processing
Child is done, exiting
Parent is exiting












run
